<!-- Trigger Button -->
<div class="mb-4">
  <button type="button" class="btn btn-outline btn-sm" onclick="openBarcodeModal()">
    üì∑ Scan Barcode
  </button>
</div>

<!-- Modal -->
<dialog id="barcode_modal" class="modal">
  <div class="modal-box bg-base-100 text-base-content max-w-md">
    <h3 class="font-bold text-lg mb-4">Scan Barcode</h3>

    <!-- Camera Preview Container -->
    <div id="reader" class="rounded-md border border-neutral bg-base-200 p-2 mb-2 aspect-square w-full relative overflow-hidden"></div>

    <!-- Barcode Result Input -->
    <input 
      type="text" 
      id="barcode_result" 
      placeholder="Scanned barcode will appear here" 
      class="input input-bordered w-full mb-2" readonly />
    
    <!-- API Result Display -->
    <div id="api_result" class="hidden">
      <div class="alert alert-info mb-2">
        <span id="loading_message">üîç Looking up barcode...</span>
      </div>
      <div id="food_data" class="bg-base-200 p-3 rounded-md text-sm"></div>
    </div>

    <div class="modal-action mt-4">
      <form method="dialog">
        <button class="btn btn-sm" onclick="stopBarcodeScanner()">Close</button>
      </form>
    </div>
  </div>
</dialog>

<!-- QuaggaJS Script -->
<script src="https://cdn.jsdelivr.net/npm/@ericblade/quagga2@1.2.6/dist/quagga.min.js"></script>

<!-- Scanner Styles -->
<style>
  #reader {
    position: relative;
  }
  
  #reader video {
    width: 100% !important;
    height: 100% !important;
    object-fit: cover;
    border-radius: 0.375rem;
  }
  
  #reader canvas {
    position: absolute !important;
    top: 0 !important;
    left: 0 !important;
    width: 100% !important;
    height: 100% !important;
    border-radius: 0.375rem;
  }
  
  #reader canvas.drawingBuffer {
    z-index: 2;
  }
  
  /* Scanning indicator */
  .scanning-line {
    position: absolute;
    top: 50%;
    left: 10%;
    right: 10%;
    height: 2px;
    background: linear-gradient(90deg, transparent, #ff0000, transparent);
    animation: scan 2s linear infinite;
    z-index: 3;
  }
  
  @keyframes scan {
    0% { transform: translateY(-100px); opacity: 0; }
    50% { opacity: 1; }
    100% { transform: translateY(100px); opacity: 0; }
  }
</style>

<!-- Scanner Logic -->
<script>
  let isScanning = false;

  async function requestCameraPermission() {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ video: true });
      stream.getTracks().forEach(track => track.stop()); // Stop the test stream
      return true;
    } catch (err) {
      console.error("Camera permission denied:", err);
      return false;
    }
  }

  async function startBarcodeScanner() {
    console.log("=== Starting Barcode Scanner ===");
    
    if (!window.Quagga) {
      console.error("QuaggaJS is not loaded.");
      alert("Barcode scanner library not loaded. Please refresh the page.");
      return;
    }

    if (isScanning) {
      console.log("Scanner already running");
      return;
    }

    // Check camera permission first
    const hasPermission = await requestCameraPermission();
    if (!hasPermission) {
      alert("Camera permission is required for barcode scanning. Please allow camera access and try again.");
      return;
    }

    const readerElement = document.querySelector("#reader");
    if (!readerElement) {
      console.error("Reader element not found");
      return;
    }

    // Clear any previous content
    readerElement.innerHTML = '<div style="text-align: center; padding: 20px;">Initializing camera...</div>';

    console.log("Initializing Quagga with config...");

    const config = {
      inputStream: {
        type: "LiveStream",
        target: readerElement,
        constraints: {
          width: { min: 320, ideal: 640, max: 1280 },
          height: { min: 240, ideal: 480, max: 720 },
          facingMode: "environment",
          aspectRatio: { min: 1, max: 2 }
        }
      },
      decoder: {
        readers: [
          "ean_reader", 
          "ean_8_reader",
          "code_128_reader", 
          "code_39_reader",
          "upc_reader",
          "upc_e_reader",
          "codabar_reader"
        ]
      },
      locate: true,
      locator: {
        patchSize: "medium",
        halfSample: true
      },
      numOfWorkers: 2,
      frequency: 10,
      debug: {
        drawBoundingBox: true,
        showFrequency: true,
        drawScanline: true,
        showPattern: true
      }
    };

    console.log("Config:", config);

    Quagga.init(config, function(err) {
      if (err) {
        console.error("Quagga init failed:", err);
        readerElement.innerHTML = '<div style="text-align: center; padding: 20px; color: red;">Camera initialization failed. Please check permissions.</div>';
        alert("Camera initialization failed: " + err.message);
        return;
      }
      
      console.log("Quagga initialized successfully, starting scanner...");
      
      // Remove only the loading message, not the video elements
      const loadingMsg = readerElement.querySelector('div');
      if (loadingMsg && loadingMsg.textContent.includes('Initializing')) {
        loadingMsg.remove();
      }
      
      Quagga.start();
      isScanning = true;
      
      // Add scanning line indicator
      const scanLine = document.createElement('div');
      scanLine.className = 'scanning-line';
      readerElement.appendChild(scanLine);
      
      console.log("Scanner started, waiting for barcodes...");
      console.log("Video elements in reader:", readerElement.children.length);
      
      // Fix canvas positioning after a short delay
      setTimeout(() => {
        const video = readerElement.querySelector('video');
        const canvases = readerElement.querySelectorAll('canvas');
        
        if (video && canvases.length > 0) {
          console.log("Fixing canvas positioning...");
          const videoRect = video.getBoundingClientRect();
          const readerRect = readerElement.getBoundingClientRect();
          
          canvases.forEach(canvas => {
            canvas.style.position = 'absolute';
            canvas.style.top = '0px';
            canvas.style.left = '0px';
            canvas.style.width = '100%';
            canvas.style.height = '100%';
            canvas.style.zIndex = '2';
          });
        }
      }, 100);
    });

    // Remove any existing listeners to prevent duplicates
    Quagga.offDetected();
    Quagga.offProcessed();
    
    // Add processing listener for debugging
    Quagga.onProcessed(function(result) {
      var drawingCtx = Quagga.canvas.ctx.overlay,
          drawingCanvas = Quagga.canvas.dom.overlay;

      if (result) {
        if (result.boxes) {
          drawingCtx.clearRect(0, 0, parseInt(drawingCanvas.getAttribute("width")), parseInt(drawingCanvas.getAttribute("height")));
          result.boxes.filter(function (box) {
            return box !== result.box;
          }).forEach(function (box) {
            Quagga.ImageDebug.drawPath(box, {x: 0, y: 1}, drawingCtx, {color: "green", lineWidth: 2});
          });
        }

        if (result.box) {
          Quagga.ImageDebug.drawPath(result.box, {x: 0, y: 1}, drawingCtx, {color: "#00F", lineWidth: 2});
        }

        if (result.codeResult && result.codeResult.code) {
          Quagga.ImageDebug.drawPath(result.line, {x: 'x', y: 'y'}, drawingCtx, {color: 'red', lineWidth: 3});
        }
      }
    });
    
    Quagga.onDetected(function(result) {
      console.log("=== BARCODE DETECTED ===");
      console.log("Full result:", result);
      
      const code = result?.codeResult?.code;
      const format = result?.codeResult?.format;
      
      console.log("Code:", code);
      console.log("Format:", format);
      
      if (code) {
        // Beep or vibrate if available
        if (navigator.vibrate) {
          navigator.vibrate(200);
        }
        
        // Show the scanned barcode in the input field
        document.getElementById("barcode_result").value = code;
        console.log("Barcode detected:", code);
        
        // Stop scanner and make API request
        stopBarcodeScanner();
        fetchBarcodeData(code);
      }
    });
  }

  function stopBarcodeScanner() {
    console.log("=== Stopping Barcode Scanner ===");
    
    if (window.Quagga && isScanning) {
      Quagga.stop();
      Quagga.offDetected();
      Quagga.offProcessed();
      isScanning = false;
      
      // Clear the reader content
      const readerElement = document.querySelector("#reader");
      if (readerElement) {
        readerElement.innerHTML = '';
      }
      
      console.log("Scanner stopped successfully");
    }
  }

  function openBarcodeModal() {
    console.log("=== Opening Barcode Modal ===");
    const modal = document.getElementById("barcode_modal");
    modal.showModal();
    
    // Clear previous result
    document.getElementById("barcode_result").value = '';
    
    // Start scanner after modal is fully rendered
    setTimeout(() => {
      startBarcodeScanner();
    }, 200);
  }

  // Ensure we stop scanning when modal closes
  document.getElementById("barcode_modal").addEventListener("close", function() {
    console.log("Modal closed, stopping scanner");
    stopBarcodeScanner();
  });

  // Function to fetch barcode data from API
  async function fetchBarcodeData(barcode) {
    console.log("=== Fetching Barcode Data ===");
    console.log("Barcode:", barcode);
    
    const apiResult = document.getElementById("api_result");
    const loadingMessage = document.getElementById("loading_message");
    const foodData = document.getElementById("food_data");
    
    // Show loading state
    apiResult.classList.remove("hidden");
    loadingMessage.textContent = "üîç Looking up barcode...";
    foodData.innerHTML = "";
    
    try {
      const response = await fetch(`/api/barcodes?barcode=${encodeURIComponent(barcode)}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'X-Requested-With': 'XMLHttpRequest'
        }
      });
      
      const data = await response.json();
      
      if (response.ok) {
        console.log("API Response:", data);
        
        // Check if we have food details from the second API call
        if (data.food_details && data.food_details.food && data.food_details.food.food_name) {
          const food = data.food_details.food;
          loadingMessage.textContent = "‚úÖ Food found! Filling form...";
          
          // Fill in the form with food data
          fillFormWithFoodData(food);
          
          // Display success message
          foodData.innerHTML = `
            <div class="space-y-2">
              <div class="text-success">
                <p><strong>‚úÖ Form filled with:</strong> ${food.food_name}</p>
                <p class="text-sm">You can now adjust the serving size and nutrition values as needed.</p>
              </div>
            </div>
          `;
          
          // Auto-close modal after a short delay
          setTimeout(() => {
            document.getElementById("barcode_modal").close();
          }, 2000);
          
        } else {
          loadingMessage.textContent = "‚úÖ Barcode found but no detailed food info available";
          
          // Display the barcode data
          foodData.innerHTML = `
            <div class="space-y-2">
              <pre class="text-xs overflow-auto">${JSON.stringify(data, null, 2)}</pre>
            </div>
          `;
        }
      } else {
        console.error("API Error:", data);
        loadingMessage.textContent = "‚ùå Error looking up barcode";
        foodData.innerHTML = `
          <div class="text-error">
            <p><strong>Error:</strong> ${data.error || 'Unknown error occurred'}</p>
          </div>
        `;
      }
    } catch (error) {
      console.error("Fetch Error:", error);
      loadingMessage.textContent = "‚ùå Network error";
      foodData.innerHTML = `
        <div class="text-error">
          <p><strong>Network Error:</strong> ${error.message}</p>
        </div>
      `;
    }
  }

  // Function to fill form with food data from API response
  function fillFormWithFoodData(food) {
    console.log("=== Filling Form with Food Data ===");
    console.log("Food data:", food);
    
    // Fill in the food name
    const nameInput = document.querySelector('input[name="food_item[name]"]');
    if (nameInput && food.food_name) {
      nameInput.value = food.food_name;
      console.log("Set name:", food.food_name);
    }
    
    // Use the first serving (100g) as default if available
    const servings = food.servings?.serving;
    if (servings && servings.length > 0) {
      // Find 100g serving or use first serving
      const defaultServing = servings.find(s => s.serving_description === "100 g") || servings[0];
      
      console.log("Using serving:", defaultServing);
      
      // Set default grams (use metric_serving_amount or default to 100)
      const gramsInput = document.querySelector('input[name="food_item[grams]"]');
      if (gramsInput) {
        const grams = defaultServing.metric_serving_amount || "100";
        gramsInput.value = Math.round(parseFloat(grams));
        console.log("Set grams:", grams);
      }
      
      // Fill nutrition values
      const caloriesInput = document.querySelector('input[name="food_item[calories]"]');
      if (caloriesInput && defaultServing.calories) {
        caloriesInput.value = Math.round(parseFloat(defaultServing.calories));
        console.log("Set calories:", defaultServing.calories);
      }
      
      const proteinInput = document.querySelector('input[name="food_item[protein]"]');
      if (proteinInput && defaultServing.protein) {
        proteinInput.value = parseFloat(defaultServing.protein).toFixed(1);
        console.log("Set protein:", defaultServing.protein);
      }
      
      const carbsInput = document.querySelector('input[name="food_item[carbs]"]');
      if (carbsInput && defaultServing.carbohydrate) {
        carbsInput.value = parseFloat(defaultServing.carbohydrate).toFixed(1);
        console.log("Set carbs:", defaultServing.carbohydrate);
      }
      
      const fatsInput = document.querySelector('input[name="food_item[fats]"]');
      if (fatsInput && defaultServing.fat) {
        fatsInput.value = parseFloat(defaultServing.fat).toFixed(1);
        console.log("Set fats:", defaultServing.fat);
      }
    }
    
    // Set food_id if available
    const foodIdInput = document.querySelector('input[name="food_item[food_id]"]');
    if (foodIdInput && food.food_id) {
      foodIdInput.value = food.food_id;
      console.log("Set food_id:", food.food_id);
    }
    
    console.log("Form filling completed");
  }

  // Test function you can call from console
  window.testBarcodeScanner = function() {
    console.log("Testing barcode scanner...");
    console.log("Quagga available:", !!window.Quagga);
    console.log("Reader element:", document.querySelector("#reader"));
    console.log("Modal element:", document.getElementById("barcode_modal"));
  };
</script>
