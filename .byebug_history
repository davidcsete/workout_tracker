c
totals.total_protein.to_i
totals.total_protein
@total_calories
n
totals = meals_today.joins(:food_items).select(
      "SUM(food_items.calories) as total_calories",
      "SUM(food_items.protein) as total_protein",
      "SUM(food_items.carbs) as total_carbs",
      "SUM(food_items.fats) as total_fats"
    ).take
meals_today.joins(:food_items).select(
      "SUM(food_items.calories) as total_calories",
      "SUM(food_items.protein) as total_protein",
      "SUM(food_items.carbs) as total_carbs",
      "SUM(food_items.fats) as total_fats"
    ).take
c
Meal.where(meal_type: meal_params[:meal_type].to_i, user_id: current_user.id, created_at: Time.zone.today.all_day).exists?
Meal.where(meal_type: meal_params[:meal_type].to_i, user_id: current_user.id, created_at: Time.zone.today.all_day)
c
n
c
Meal.find(params[:meal_id])
params[:meal_id]
params
params[:food_item]
@food_item.meal
@food_item
c
params
c
meal_params[:meal_type].to_i
params[:meal][:meal_type].to_i
params[:meal][:meal_type]
params[:meal_type]
Meal.new(meal_type:'1')
Meal.new(meal_type:1)
params
meal_params
c
Meal.meal_types.keys.map { |m| [m.titleize, Meal.meal_types[m]] }
c
@meal.save
@meal
c
current_user.meals
c
=>  8:     @workout_plans = WorkoutPlan.all.order(Arel.sql("CASE WHEN user_id = #{current_user.id} THEN 0 ELSE 1 END"))n
WorkoutPlan.all.order(Arel.sql("CASE WHEN user_id = #{current_user.id} THEN 0 ELSE 1 END"))
exit
exercise_tracking.exercise.name
c
exercise_tracking.exercise.name
exercise_tracking.exercise
c
here
c
ec
c
exercise_trackingg.exercse
exercise_trackinggeercise
exercise_tracking
exercise_trackin
exercise_trackingg
exercise_trackinexercise_tracking
exercise_trackin
exercise_trackng
exdsada
c
params[:exercise_tracking][:exercise_id]
params[:exercise_id]
params[:exercise_tracking][:workout_plan_id]
params[:exercise_tracking]
params[:workout_plan_id]
params
c
exit
params
c
params
c
params
exit
current_user.workout_plans.length
current_user.workout_plans
